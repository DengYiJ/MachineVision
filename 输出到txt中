#include <opencv2/opencv.hpp>
#include <vector>
#include <iostream>
#include <fstream> // 包含头文件

using namespace cv;
using namespace std;



std::vector<Point2f> detectEdgePoints(const Mat& grayImage, const Point2f& center, double angleInterval, double edgeThreshold)
{
    std::vector<Point2f> edgePoints;
    for (double angle = 0; angle < 360; angle += angleInterval) {
        double radian = angle * CV_PI / 180.0;
        double dx = cos(radian);
        double dy = sin(radian);

        for (double t = 0; t < std::max(grayImage.cols, grayImage.rows); t += 0.5) {
            Point2f point(center.x + t * dx, center.y + t * dy);
            if (point.x < 0 || point.y < 0 || point.x >= grayImage.cols || point.y >= grayImage.rows) {
                break;
            }

            // 获取像素值
            uchar pixelValue = grayImage.at<uchar>(point);

            // 判断是否为边缘点
            if (abs(pixelValue - grayImage.at<uchar>(center)) > edgeThreshold) {
                edgePoints.push_back(point);
                break;
            }
        }
    }
    return edgePoints;
}


int main()
{

   //Mat src;
    // 初始化一个 ofstream 对象来写入文件
    ofstream file("output.txt");

    //// 指定图像文件夹的路径
    //string folderPath = "C:\\Users\\Ste'fan\\Desktop\\MachineVision\\design\\Image\\";
    
    //// 遍历图像文件夹中的所有文件
    //for (const auto& entry : fs::directory_iterator(folderPath)) 
    //{
    //    // 检查文件是否是 JPEG 格式
    //    if (entry.path().extension() == ".jpg")
    //    {
    //        // 读取图像
    //        src = imread(entry.path().string(), IMREAD_GRAYSCALE);
    //        if (src.empty()) 
    //        {
    //            cout << "Could not open or find the image: " << entry.path().filename() << endl;
    //            continue;
    //        }
    //    }
    //    
    //}
    // 读取输入图像
   Mat src = imread("C:\\Users\\Ste'fan\\Desktop\\MachineVision\\design\\Image\\Image01.jpg", IMREAD_GRAYSCALE);//, IMREAD_GRAYSCALE
    if (src.empty()) {
        cout << "Could not open or find the image!" << endl;
        return -1;
    }
    else
    {
        cout << "Sucessfully find picture!" << endl;
        namedWindow("OriginalPicture", WINDOW_NORMAL);

        //调整窗口大小以适应图片大小
        resizeWindow("OriginalPicture", src.cols, src.rows);

        // 显示原始图片
        imshow("OriginalPicture", src);
        waitKey(0);
    }
    GaussianBlur(src, src, Size(9, 9), 2, 2); // 高斯模糊

    // 反转图像（黑白反转）
    Mat inverted;
    bitwise_not(src, inverted);

    Mat binarized; // 二值化图像
    threshold(inverted, binarized, 80, 255, THRESH_BINARY);

    namedWindow("binarizedPicture", WINDOW_NORMAL);
    resizeWindow("binarizedPicture", binarized.cols, binarized.rows);
    imshow("binarizedPicture", binarized);
    waitKey(0);

    // 使用形态学操作（闭运算）去除噪声并填充椭圆内的空隙。
    Mat morph;
    Mat element = getStructuringElement(MORPH_ELLIPSE, Size(5, 5));
    morphologyEx(binarized, morph, MORPH_CLOSE, element);

    //使用连通区域标记
    Mat labels;
    int numLabels = connectedComponents(binarized, labels);

    // 输出找到的连通组件数量
    std::cout << "Number of labels: " << numLabels << std::endl;

    // 创建一个彩色版本的标记图像
    Mat coloredLabels = Mat::zeros(src.size(), CV_8UC3);
    vector<Vec3b> colors(numLabels);
    colors[0] = Vec3b(0, 0, 0); // 背景设为黑色
    for (int i = 1; i < numLabels; i++) {
        colors[i] = Vec3b(rand() % 256, rand() % 256, rand() % 256); // 生成随机颜色
    }

    //// 将标记的连通域着色到彩色标记图像上
    //for (int y = 0; y < coloredLabels.rows; y++) {
    //    for (int x = 0; x < coloredLabels.cols; x++) {
    //        int label = labels.at<int>(y, x);
    //        coloredLabels.at<Vec3b>(y, x) = colors[label];
    //    }
    //}


 // 创建一个容器来存储符合条件的 label 和它们的中心位置
    std::vector<std::pair<int, Point2f>> targetLabelsAndCenters;


    // 遍历每个连通域并计算其宽高比
    for (int label = 1; label < numLabels; ++label)
    {
        Mat mask = (labels == label);

        // 查找连通域的边界框
        vector<vector<Point>> contours;
        findContours(mask, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);

        if (contours.size() > 0) {
            Rect boundingBox = boundingRect(contours[0]);
            float aspectRatio = static_cast<float>(boundingBox.width) / boundingBox.height;


            double area = contourArea(contours[0]);
            //std::cout << "Contour " << label << " area: " << area << std::endl;//输出面积，便于找到阈值
       //判断面积是否在8k-2w内
            if (area > 8000 && area < 20000)
            {
                // 计算轮廓的矩
                Moments M = moments(contours[0]);

                // 计算质心
                Point2f center(M.m10 / M.m00, M.m01 / M.m00);

                // 将 label 和其中心位置添加到容器中
                targetLabelsAndCenters.push_back(std::make_pair(label, center));


                // 判断宽高比是否接近1
                if (aspectRatio > 0.9 && aspectRatio < 1.1)
                {
                    // 将标记的连通域着色到彩色标记图像上
                    for (int y = 0; y < coloredLabels.rows; y++)
                    {
                        for (int x = 0; x < coloredLabels.cols; x++)
                        {
                            if (labels.at<int>(y, x) == label)
                            {
                                coloredLabels.at<Vec3b>(y, x) = colors[label];
                            }
                        }
                    }
                }
            }

        }
    }
    
       
//// 输出符合条件的 label 和它们的中心位置
//    cout << "Target Labels and original Centers: " << std::endl;
//    for (const auto& pair : targetLabelsAndCenters)
//    {
//        std::cout << "Label: " << pair.first << ", Center: (" << pair.second.x << ", " << pair.second.y << ")" << std::endl;
//    }

   

    for (const auto& pair : targetLabelsAndCenters)
    {
        //std::cout << "Label: " << pair.first << ", Original Center: (" << pair.second.x << ", " << pair.second.y << ")" << std::endl;
        //画出初始（未使用椭圆拟合得出）椭圆圆心，红色
        //circle(coloredLabels, pair.second, 10, Scalar(0, 0, 255), -1);
        // 检测边缘点
        std::vector<Point2f> edgePoints = detectEdgePoints(src, pair.second, 1.0, 100.0); // 1.0为角度间隔，20.0为灰度变化阈值

        // 绘制边缘点
        for (const auto& edgePoint : edgePoints) 
        {
            circle(coloredLabels, edgePoint, 2, Scalar(0, 255, 0), -1); // 2为圆的半径，Scalar(0, 255, 0)表示绿色，-1表示实心圆
        }
        //用边缘点拟合椭圆
            if (edgePoints.size() >=10 ) // 用10个点拟合椭圆
            {
                RotatedRect ellipse = fitEllipse(edgePoints);

                // 在图像上绘制椭圆
                cv::ellipse(coloredLabels, ellipse, Scalar(255, 0, 0), 2);

                // 获取椭圆的亚像素中心
                Point2f ellipseCenter = ellipse.center;
                
                //输出获取的亚像素中心进入文件
                if (file.is_open())
                {
                    // 重定向输出到文件
                    std::streambuf* coutbuf = std::cout.rdbuf(); // 保存原始的 cout buffer
                    std::cout.rdbuf(file.rdbuf()); // 重定向 cout 到文件

                    // 将信息输出到文件
                    // 例如：std::cout << "Number of labels: " << numLabels << std::endl;
                    
                    std::cout << "Label: " << pair.first << ",Matching Ellipse Center: (" << ellipseCenter.x << ", " << ellipseCenter.y << ")" << std::endl;
                    // 你想保存的所有输出信息

                    // 恢复 cout 到原始状态
                    std::cout.rdbuf(coutbuf);

                    // 关闭文件
                   // file.close();
                }
                else
                {
                    std::cerr << "Unable to open file for writing." << std::endl;
                }

               

                // 绘制椭圆亚像素中心
                circle(coloredLabels, ellipseCenter, 5, Scalar(255, 255, 0), -1); // 黄色圆心
            }
    }
    //输出原始椭圆中心进入文件
     if (file.is_open()) 
    {
        // 重定向输出到文件
        std::streambuf* coutbuf = std::cout.rdbuf(); // 保存原始的 cout buffer
        std::cout.rdbuf(file.rdbuf()); // 重定向 cout 到文件

        // 将信息输出到文件
        // 例如：std::cout << "Number of labels: " << numLabels << std::endl;
        // // 输出符合条件的 label 和它们的中心位置
        cout << "Target Labels and original Centers: " << std::endl;
        for (const auto& pair : targetLabelsAndCenters)
        {
            std::cout << "Label: " << pair.first << ", Center: (" << pair.second.x << ", " << pair.second.y << ")" << std::endl;
        }

        // 你想保存的所有输出信息

        // 恢复 cout 到原始状态
        std::cout.rdbuf(coutbuf);

        // 关闭文件
        file.close();
    }
    else 
    {
        std::cerr << "Unable to open file for writing." << std::endl;
    }
   



    // 显示标记后的图像
    namedWindow("Connected Components", WINDOW_NORMAL);
    resizeWindow("Connected Components", coloredLabels.cols, coloredLabels.rows);
    imshow("Connected Components", coloredLabels);
    waitKey(0);

  

    return 0;
}
